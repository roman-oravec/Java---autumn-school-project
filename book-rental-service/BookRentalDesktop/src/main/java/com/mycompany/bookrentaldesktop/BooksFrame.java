/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.bookrentaldesktop;

import com.mycompany.bookrental.Book;
import com.mycompany.bookrental.Customer;
import com.mycompany.bookrental.Rent;
import com.mycompany.models.BooksTableModel;
import com.mycompany.models.CustomerTableModel;
import com.mycompany.models.RentsTableModel;
import java.awt.Frame;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author roman
 */
public class BooksFrame extends javax.swing.JFrame {

    private static BooksTableModel booksModel;
    private static CustomerTableModel customersModel;
    private static RentsTableModel rentsModel;
    private static final ResourceBundle bundle = ResourceBundle.getBundle("com.mycompany.bookrentaldesktop.Bundle");
    private static TableRowSorter<BooksTableModel> bookSorter;
    private static TableRowSorter<CustomerTableModel> customerSorter;

    /**
     * Creates new form BooksUI
     */
    public BooksFrame() {
        initComponents();
        initModels();
        initSorters();
        jTableBooks.getTableHeader().setReorderingAllowed(rootPaneCheckingEnabled);
        jTableCustomers.getTableHeader().setReorderingAllowed(rootPaneCheckingEnabled);
        //createSampleObjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonAddBook = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBooks = new javax.swing.JTable();
        jButtonDeleteBook = new javax.swing.JButton();
        jButtonEditBook = new javax.swing.JButton();
        jButtonCreateName1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButtonAddCustomer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCustomers = new javax.swing.JTable();
        jButtonEditCustomer = new javax.swing.JButton();
        jButtonDeleteCustomer = new javax.swing.JButton();
        jButtonCreateName = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRents = new javax.swing.JTable();
        jButtonRemoveRent = new javax.swing.JButton();
        jButtonProlong = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mycompany/bookrentaldesktop/Bundle"); // NOI18N
        setTitle(bundle.getString("BooksFrame.title")); // NOI18N

        jTabbedPane1.setToolTipText(bundle.getString("BooksFrame.jTabbedPane1.toolTipText")); // NOI18N

        jButtonAddBook.setText(bundle.getString("BooksFrame.jButtonAddBook.text")); // NOI18N
        jButtonAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddBookActionPerformed(evt);
            }
        });

        jTableBooks.setAutoCreateRowSorter(true);
        jTableBooks.setModel(new BooksTableModel());
        jScrollPane1.setViewportView(jTableBooks);

        jButtonDeleteBook.setText(bundle.getString("BooksFrame.jButtonDeleteBook.text")); // NOI18N
        jButtonDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteBookActionPerformed(evt);
            }
        });

        jButtonEditBook.setText(bundle.getString("BooksFrame.jButtonEditBook.text")); // NOI18N
        jButtonEditBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditBookActionPerformed(evt);
            }
        });

        jButtonCreateName1.setText(bundle.getString("BooksFrame.jButtonCreateName1.text")); // NOI18N
        jButtonCreateName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateName1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCreateName1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 543, Short.MAX_VALUE)
                .addComponent(jButtonDeleteBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEditBook)
                .addGap(18, 18, 18)
                .addComponent(jButtonAddBook)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(523, 523, 523)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddBook)
                    .addComponent(jButtonDeleteBook)
                    .addComponent(jButtonEditBook)
                    .addComponent(jButtonCreateName1))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(83, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab(bundle.getString("BooksFrame.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jButtonAddCustomer.setText(bundle.getString("BooksFrame.jButtonAddCustomer.text")); // NOI18N
        jButtonAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddCustomerActionPerformed(evt);
            }
        });

        jTableCustomers.setAutoCreateRowSorter(true);
        jTableCustomers.setModel(new CustomerTableModel());
        jScrollPane2.setViewportView(jTableCustomers);

        jButtonEditCustomer.setText(bundle.getString("BooksFrame.jButtonEditCustomer.text")); // NOI18N
        jButtonEditCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCustomerActionPerformed(evt);
            }
        });

        jButtonDeleteCustomer.setText(bundle.getString("BooksFrame.jButtonDeleteCustomer.text")); // NOI18N
        jButtonDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCustomerActionPerformed(evt);
            }
        });

        jButtonCreateName.setText(bundle.getString("BooksFrame.jButtonCreateName.text")); // NOI18N
        jButtonCreateName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCreateName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonDeleteCustomer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditCustomer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAddCustomer))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddCustomer)
                    .addComponent(jButtonEditCustomer)
                    .addComponent(jButtonDeleteCustomer)
                    .addComponent(jButtonCreateName))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 597, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab(bundle.getString("BooksFrame.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jTableRents.setModel(new RentsTableModel());
        jScrollPane3.setViewportView(jTableRents);

        jButtonRemoveRent.setText(bundle.getString("BooksFrame.jButtonRemoveRent.text")); // NOI18N
        jButtonRemoveRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveRentActionPerformed(evt);
            }
        });

        jButtonProlong.setText(bundle.getString("BooksFrame.jButtonProlong.text")); // NOI18N
        jButtonProlong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProlongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 906, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonProlong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveRent)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonProlong)
                    .addComponent(jButtonRemoveRent))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("BooksFrame.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(bundle.getString("BooksFrame.jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddBookActionPerformed
        JDialogBook dialog = new JDialogBook(this, true);
        dialog.setResizable(false);
        dialog.setVisible(true);
        addBookSwingWorker sw = new addBookSwingWorker(this, dialog);
        sw.execute();
    }//GEN-LAST:event_jButtonAddBookActionPerformed

    private void jButtonDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteBookActionPerformed
        deleteSwingWorker sw = new deleteSwingWorker(1);
        sw.execute();
    }//GEN-LAST:event_jButtonDeleteBookActionPerformed

    private void jButtonEditBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditBookActionPerformed
        int[] selected = jTableBooks.getSelectedRows();
        JDialogBook dialog = new JDialogBook(this, true);
        dialog.setResizable(false);      
        dialog.getjTextFieldName().setText((String) booksModel.getValueAt(selected[0], 1));
                dialog.getjTextFieldAuthor().setText((String) booksModel.getValueAt(selected[0], 2));
                dialog.getjTextFieldPages().setText(Integer.toString((Integer) booksModel.getValueAt(selected[0], 3)));
                dialog.getjTextFieldCopies().setText(Integer.toString((Integer) booksModel.getValueAt(selected[0], 4)));
                dialog.setVisible(true);
        editBookSwingWorker sw = new editBookSwingWorker(this, dialog);
        sw.execute();
    }//GEN-LAST:event_jButtonEditBookActionPerformed

    private void jButtonAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddCustomerActionPerformed
        JDialogCustomer dialog = new JDialogCustomer(this, true);
        dialog.setResizable(false);
        dialog.setVisible(true);
        addCustomerSwingWorker sw = new addCustomerSwingWorker(this, dialog);
        sw.execute();
    }//GEN-LAST:event_jButtonAddCustomerActionPerformed


    private void jButtonEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditCustomerActionPerformed
        int[] selected;
        selected = jTableCustomers.getSelectedRows();
        JDialogCustomer dialog = new JDialogCustomer(this, true);
        dialog.setResizable(false);
        editCustomerSwingWorker sw = new editCustomerSwingWorker(this, dialog);
        dialog.getjTextName().setText((String) customersModel.getValueAt(selected[0], 1));
                dialog.getjTextEmail().setText((String) customersModel.getValueAt(selected[0], 2));
                boolean mem = dialog.getjCheckBoxMembership();
                dialog.setMembershipPaid(mem);
                dialog.setVisible(true);
        sw.execute();
    }//GEN-LAST:event_jButtonEditCustomerActionPerformed

    private void jButtonDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCustomerActionPerformed
        deleteSwingWorker sw = new deleteSwingWorker(2);
        sw.execute();
    }//GEN-LAST:event_jButtonDeleteCustomerActionPerformed

    private void jButtonRemoveRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveRentActionPerformed
        deleteSwingWorker sw = new deleteSwingWorker(3);
        sw.execute();
    }//GEN-LAST:event_jButtonRemoveRentActionPerformed

    private void jButtonCreateNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateNameActionPerformed
        addRentSwingWorker sw = new addRentSwingWorker();
        sw.execute();
    }//GEN-LAST:event_jButtonCreateNameActionPerformed

    private void jButtonCreateName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateName1ActionPerformed
        addRentSwingWorker sw = new addRentSwingWorker();
        sw.execute();
    }//GEN-LAST:event_jButtonCreateName1ActionPerformed

    private void jButtonProlongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProlongActionPerformed
    updateRentSwingWorker sw = new updateRentSwingWorker();
    sw.execute();
    }//GEN-LAST:event_jButtonProlongActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BooksFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BooksFrame().setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonAddBook;
    private javax.swing.JButton jButtonAddCustomer;
    private javax.swing.JButton jButtonCreateName;
    private javax.swing.JButton jButtonCreateName1;
    private javax.swing.JButton jButtonDeleteBook;
    private javax.swing.JButton jButtonDeleteCustomer;
    private javax.swing.JButton jButtonEditBook;
    private javax.swing.JButton jButtonEditCustomer;
    private javax.swing.JButton jButtonProlong;
    private javax.swing.JButton jButtonRemoveRent;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableBooks;
    private javax.swing.JTable jTableCustomers;
    private javax.swing.JTable jTableRents;
    // End of variables declaration//GEN-END:variables

    private void initModels() {
        booksModel = (BooksTableModel) jTableBooks.getModel();
        customersModel = (CustomerTableModel) jTableCustomers.getModel();
        rentsModel = (RentsTableModel) jTableRents.getModel();
    }

    private void initSorters() {
        bookSorter = new TableRowSorter<>(booksModel);
        customerSorter = new TableRowSorter<>(customersModel);
    }

    private class addBookSwingWorker extends SwingWorker<Void, Void> {

        private final JDialogBook dialog;

        public addBookSwingWorker(Frame parent, JDialogBook dialog) {
            this.dialog = dialog;
        }

        @Override
        protected Void doInBackground() throws Exception {
            Book book = new Book();
            book.setName(dialog.getName());
            book.setAuthor(dialog.getAuthor());
            book.setPages(dialog.getPages());
            book.setCopies(dialog.getCopies());
            booksModel.addBook(book);
            return null;
        }

        @Override
        protected void done() {
            dialog.dispose();
        }
    }

    private class addCustomerSwingWorker extends SwingWorker<Void, Void> {

        private final JDialogCustomer dialog;

        public addCustomerSwingWorker(Frame parent, JDialogCustomer dialog) {
            this.dialog = dialog;
        }

        @Override
        protected Void doInBackground() throws Exception {
            Customer customer = new Customer();
            customer.setName(dialog.getName());
            customer.setEmail(dialog.geteMail());
            customer.setMembership(dialog.isMembershipPaid());
            customersModel.addCustomer(customer);
            return null;
        }
    


        @Override
        protected void done() {          
            dialog.dispose();           
        }

    }

    private class editBookSwingWorker extends SwingWorker<Void, Void> {

        private final JDialogBook dialog;
        private final int[] selected;

        public editBookSwingWorker(Frame parent,JDialogBook dialog) {
            this.dialog = dialog;
            //dialog = new JDialogBook(parent, true);
            //dialog.setResizable(false);   
            //dialog.setVisible(true);
            selected = jTableBooks.getSelectedRows();
        }

        @Override
        protected Void doInBackground() throws Exception {
            if (selected.length == 1) {
                /*
                dialog.getjTextFieldName().setText((String) booksModel.getValueAt(selected[0], 1));
                dialog.getjTextFieldAuthor().setText((String) booksModel.getValueAt(selected[0], 2));
                dialog.getjTextFieldPages().setText(Integer.toString((Integer) booksModel.getValueAt(selected[0], 3)));
                dialog.getjTextFieldCopies().setText(Integer.toString((Integer) booksModel.getValueAt(selected[0], 4)));
                dialog.setVisible(true);
*/
                Book book = booksModel.getBookManager().getBookById((Long) booksModel.getValueAt(selected[0], 0));

                book.setName(dialog.getName());
                book.setAuthor(dialog.getAuthor());
                book.setPages(dialog.getPages());
                book.setCopies(dialog.getCopies());

                booksModel.getBookManager().updateBook(book);
                booksModel.update(book);
            } else {
                JOptionPane.showMessageDialog(null, bundle.getString("SelectOneBookEdit"));
            }

            return null;
        }

        @Override
        protected void done() {
            //dialog.setVisible(true);
            jTableBooks.clearSelection();
            
            dialog.dispose();
        }
    }

    private class editCustomerSwingWorker extends SwingWorker<Void, Void> {

        private final JDialogCustomer dialog;
        private final int[] selected;

        public editCustomerSwingWorker(Frame parent, JDialogCustomer dialog) {
            this.dialog = dialog;
            selected = jTableCustomers.getSelectedRows();
        }

        @Override
        protected Void doInBackground() throws Exception {
            if (selected.length == 1) {
                /*
                dialog.getjTextName().setText((String) customersModel.getValueAt(selected[0], 1));
                dialog.getjTextEmail().setText((String) customersModel.getValueAt(selected[0], 2));
                boolean mem = dialog.getjCheckBoxMembership();
                dialog.setMembershipPaid(mem);
                dialog.setVisible(true);
*/
                Customer customer = customersModel.getCustomerManager().getCustomerById((Long) customersModel.getValueAt(selected[0], 0));

                customer.setName(dialog.getName());
                customer.setEmail(dialog.geteMail());
                customer.setMembership(dialog.isMembershipPaid());

                customersModel.getCustomerManager().updateCustomer(customer);
                customersModel.update(customer);
            } else {
                JOptionPane.showMessageDialog(null, bundle.getString("SelectOneCustomerEdit"));
            }
            return null;
        }

        @Override
        protected void done() {
            jTableCustomers.clearSelection();
            dialog.dispose();
        }

    }

    private class deleteSwingWorker extends SwingWorker<Void, Void> {

        private final int type;

        public deleteSwingWorker(int type) {
            this.type = type;
        }

        @Override
        protected Void doInBackground() throws Exception {
            switch (type) {
                case 1:
                    removeBookRow(jTableBooks);
                    break;
                case 2:
                    removeCustomerRow(jTableCustomers);
                    break;   
                case 3:
                    removeRentRow(jTableRents);
                    break;
                default:
                    break;
            }
            return null;
        }

        @Override
        protected void done() {
            switch (type) {
                case 1:

                    jTableBooks.clearSelection();
                    booksModel.fireTableDataChanged();
                    

                    break;

                case 2:
                    jTableCustomers.clearSelection();
                    customersModel.fireTableDataChanged();
                    
                    break;
                
                case 3:
                    jTableRents.clearSelection();
                    rentsModel.fireTableDataChanged();
                    break;
                 
                default:
                    break;
            }

        }
    }

    private class addRentSwingWorker extends SwingWorker<Void, Void> {

        private final int[] selectedCustomer;
        private final int[] selectedBook;
        
        public addRentSwingWorker(){
            selectedCustomer = jTableCustomers.getSelectedRows();
            selectedBook = jTableBooks.getSelectedRows();
        }
        
        @Override
        protected Void doInBackground(){
            if (selectedCustomer.length == 1 && selectedBook.length == 1){
                Rent rent = new Rent();
                rent.setCustomer((Long) customersModel.getValueAt(selectedCustomer[0], 0));
                rent.setBook((Long)booksModel.getValueAt(selectedBook[0], 0));
                if (!customersModel.getCustomerManager().getCustomerById(rent.getCustomerId()).getMembership()){
                    JOptionPane.showMessageDialog(null, bundle.getString("MembershipNotPaid"));
                    return null;
                }
                if (rentsModel.getRentManager().getNumberOfAvailableCopies(booksModel.getBookManager().getBookById(rent.getBookId())) < 1){
                    JOptionPane.showMessageDialog(null, bundle.getString("NoCopies"));
                    return null;
                }
                rentsModel.addRent(rent);
            } else {
                JOptionPane.showMessageDialog(null, bundle.getString("AddRentOneOne"));
            }
            return null;
        }
        
        @Override
        protected void done(){
            rentsModel.fireTableDataChanged();           
            rentsModel.fireTableRowsUpdated(0, rentsModel.getRowCount());
            jTableCustomers.clearSelection();
            jTableBooks.clearSelection();
            rentsModel.fireTableDataChanged();
            rentsModel.fireTableRowsUpdated(0, rentsModel.getRowCount());
            
        }
    }
    
    private class updateRentSwingWorker extends SwingWorker<Void, Void> {

        private final int[] selected;

        public updateRentSwingWorker() {
            selected = jTableRents.getSelectedRows();
        }

        @Override
        protected Void doInBackground() {
            if (selected.length == 1){
                Rent rent = rentsModel.getRentManager().getRentById((Long) rentsModel.getValueAt(selected[0], 0));
                rentsModel.update(rent);
            }else {
                JOptionPane.showMessageDialog(null, bundle.getString("Prolong"));
            }
            return null;
        }
        @Override
        protected void done(){
            rentsModel.fireTableDataChanged();
            rentsModel.fireTableRowsUpdated(0, rentsModel.getRowCount());
            
        }
        
    }

    private void removeBookRow(JTable table) {
        int[] selectedRows = table.getSelectedRows();
        
        if (selectedRows.length > 0) {
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                Book book = booksModel.getBookManager().getBookById((long)booksModel.getValueAt(selectedRows[i], 0));
                if (rentsModel.getRentManager().getRentsByBook(book).size() < 1){
                    booksModel.removeRow(selectedRows[i]);
                }else{
                    JOptionPane.showMessageDialog(null, bundle.getString("DeleteRentedBook"));
                }
            }
        }
    }

    private void removeCustomerRow(JTable table) {
        int[] selectedRows = table.getSelectedRows();

        if (selectedRows.length > 0) {
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                Customer customer = customersModel.getCustomerManager().getCustomerById((long)customersModel.getValueAt(selectedRows[i], 0));
                if (rentsModel.getRentManager().getRentsByCustomer(customer).size() < 1){
                    customersModel.removeRow(selectedRows[i]);
                }else{
                    JOptionPane.showMessageDialog(null, bundle.getString("DeleteRentingCustomer"));
                }
            }
        }
    }
    
    private void removeRentRow(JTable table) {
        int[] selectedRows = table.getSelectedRows();

        if (selectedRows.length > 0) {
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                rentsModel.removeRow(selectedRows[i]);
            }
        }
    }
    
    private static void createSampleObjects(){
        Book book = new Book();
        book.setAuthor("Jack London");
        book.setName("Call of the Wild");
        book.setCopies(5);
        book.setPages(250);
        booksModel.addBook(book);
        
        Book book1 = new Book();
        book1.setAuthor("James Joyce");
        book1.setName("The Dubliners");
        book1.setCopies(1);
        book1.setPages(189);
        booksModel.addBook(book1);
        
        Customer customer = new Customer();
        customer.setName("Arthur Kingsley");
        customer.setEmail("hailtothekingbaby@gmail.com");
        customer.setMembership(true);
        customersModel.addCustomer(customer);
        
        Customer customer1 = new Customer();
        customer1.setName("David Gilmour");
        customer1.setEmail("thewall@gmail.com");
        customer1.setMembership(false);
        customersModel.addCustomer(customer1);
        
        Rent rent = new Rent();
        rent.setBook(book.getId());
        rent.setCustomer(customer.getId());
        rentsModel.addRent(rent);
        
        Rent rent1 = new Rent();
        rent1.setBook(book1.getId());
        rent1.setCustomer(customer1.getId());
        rentsModel.addRent(rent1);
        
    }

}




